[
	{
	"title": "TextView",
	"category": "View",
	"desc": "\'A user interface element that displays text to the user. To provide user-editable text, see EditText.\' - Android Devlopers\n\nTextViews are a common view that is used for showing text to the user. Useful XML attributes include android:text, android:textColor, and android:textSize. Text size should be set is SP values to allow it to scale depending to user needs based on visibility.\n\nUseful Methods include setText, getText,getTextSize, setText and setTextColor\n\nThis is a very useful view and is used in almost all apps that display any form of text.",
	"code": "<LinearLayout\n	xmlns:android=\"http://schemas.android.com/apk/res/android\"\n	android:layout_width=\"match_parent\"\n	android:layout_height=\"match_parent\">\n\n		<TextView\n			android:id=\"@+id/text_view_id\"\n			android:layout_height=\"wrap_content\"\n			android:layout_width=\"wrap_content\"\n			android:text=\"@string/hello\" />\n</LinearLayout>"
	},	
	{
	"title": "EditText",
	"category": "View",
	"desc": "\'A user interface element for entering and modifying text. When you define an edit text widget, you must specify the R.styleable.TextView_inputType attribute. For example, for plain text input set inputType to \"text\".\n\n\Choosing the input type configures the keyboard type that is shown, acceptable characters, and appearance of the edit text. For example, if you want to accept a secret number, like a unique pin or serial number, you can set inputType to \"numericPassword\". An inputType of \"numericPassword\" results in an edit text that accepts numbers only, shows a numeric keyboard when focused, and masks the text that is entered for privacy.\nSee the Text Fields guide for examples of other R.styleable.TextView_inputType settings.\nYou also can receive callbacks as a user changes text by adding a TextWatcher to the edit text. This is useful when you want to add auto-save functionality as changes are made, or validate the format of user input, for example. You add a text watcher using the TextView#addTextChangedListener method.\nThis widget does not support auto-sizing text.\' - Android Devlopers\n\nEditText views are a common view that is used for allowing the user to enter text. Useful XML attributes include android:text, android:hint, android:textColor, and android:textSize. Text size should be set is SP values to allow it to scale depending to user needs based on visibility.\n\nUseful Methods include setText, getText,getTextSize, setText and setTextColor\n\nThis is a very useful view and is used in almost all apps that allow the user to enter text.",
	"code": "<EditText\n	android:id\"@+id/enterText\"\n	android:layout_height=\"wrap_content\"\n	android:layout_width=\"match_parent\"\n	android:inputType=\"text\"/>"
	},
	{
	"title": "ListView",
	"category": "View",
	"desc": "\'Displays a vertically-scrollable collection of views, where each view is positioned immediatelybelow the previous view in the list. For a more modern, flexible, and performant approach to displaying lists, use RecyclerView.\n\nTo display a list, you can include a list view in your layout XML file.\n\nA list view is an adapter view that does not know the details, such as type and contents, of the views it contains. Instead list view requests views on demand from a ListAdapter as needed, such as to display new views as the user scrolls up or down\n\nIn order to display items in the list, call setAdapter(android.widget.ListAdapter) to associate an adapter with the list. For a simple example, see the discussion of filling an adapter view with text in the Layouts guide.\n\nTo display a more custom view for each item in your dataset, implement a ListAdapter. For example, extend BaseAdapter and create and configure the view for each data item in getView(...)\' - Android Devlopers",
	"code": "<ListView\n	android:id=\"@+id/list_view\"\n	android:layout_height=\"match_parent\"\n	android:layout_width=\"match_parent\"/> "
	},
	{
	"title": "CardView",
	"category": "View",
	"desc": "\'A FrameLayout with a rounded corner background and shadow.\n\nCardView uses elevation property on Lollipop for shadows and falls back to a custom emulated shadow implementation on older platforms.\n\nDue to expensive nature of rounded corner clipping, on platforms before Lollipop, CardView does not clip its children that intersect with rounded corners. Instead, it adds padding to avoid such intersection (See setPreventCornerOverlap(boolean) to change this behavior).\nBefore Lollipop, CardView adds padding to its content and draws shadows to that area. This padding amount is equal to maxCardElevation + (1 - cos45) * cornerRadius on the sides and maxCardElevation * 1.5 + (1 - cos45) * cornerRadius on top and bottom.\nSince padding is used to offset content for shadows, you cannot set padding on CardView. Instead, you can use content padding attributes in XML or setContentPadding(int, int, int, int) in code to set the padding between the edges of the CardView and children of CardView.\n\nNote that, if you specify exact dimensions for the CardView, because of the shadows, its content area will be different between platforms before Lollipop and after Lollipop. By using api version specific resource values, you can avoid these changes. Alternatively, If you want CardView to add inner padding on platforms Lollipop and after as well, you can call setUseCompatPadding(boolean) and pass true.\nTo change CardView's elevation in a backward compatible way, use setCardElevation(float). CardView will use elevation API on Lollipop and before Lollipop, it will change the shadow size. To avoid moving the View while shadow size is changing, shadow size is clamped by getMaxCardElevation(). If you want to change elevation dynamically, you should call setMaxCardElevation(float) when CardView is initialized.\' - Android Devlopers",
	"code": "<androidx.cardview.widget.CardView\n	android:id=\"@+id/cardview\"\n	android:layout_width=\"match_parent\"\n	android:layout_height=\"wrap_content\"\n	app:cardCornerRadius=\"6dp\"\n	app:cardElevation=\"5dp\"\n>\n\n		...\n\n</androidx.cardview.widget.CardView>"
	},
	{
	"title": "SharedPreferences",
	"category": "API",
	"desc": "\'Interface for accessing and modifying preference data returned by Context#getSharedPreferences. For any particular set of preferences, there is a single instance of this class that all clients share. Modifications to the preferences must go through an Editor object to ensure the preference values remain in a consistent state and control when they are committed to storage. Objects that are returned from the various get methods must be treated as immutable by the application.\n\nNote: This class provides strong consistency guarantees. It is using expensive operations which might slow down an app. Frequently changing properties or properties where loss can be tolerated should use other mechanisms. For more details read the comments on Editor#commit() and Editor#apply().\' - Android Devlopers",
	"code": "SharedPreferences.Editor editor = getSharedPreferences(\"prefs\",0).edit();\neditor.putString(\"example\", variableName);\neditor.apply();"
	},
	{
	"title": "GestureDectector",
	"category": "API",
	"desc": "\'Detects various gestures and events using the supplied MotionEvents. The OnGestureListener callback will notify users when a particular motion event has occurred. This class should only be used with MotionEvents reported via touch (don\'t use for trackball events). To use this class:\n\nCreate an instance of the GestureDetector for your View\n\nIn the View#onTouchEvent(MotionEvent) method ensure you call onTouchEvent(android.view.MotionEvent). The methods defined in your callback will be executed when the events occur.\n\nIf listening for OnContextClickListener#onContextClick(MotionEvent) you must call onGenericMotionEvent(android.view.MotionEvent) in View#onGenericMotionEvent(MotionEvent).\' - Android Devlopers",
	"code": "public class GestureListener extends GestureDectector.SimpleOnGestureListener{\n	@Override\n	public boolean onDoubleTap(MotionEvent e){\n\\\\\\code in here\n}\n}"
	},
	{
	"title": "Location Manager",
	"category": "API",
	"desc": "\'This class provides access to the system location services. These services allow applications to obtain periodic updates of the device\'s geographical location, or to fire an application-specified Intent when the device enters the proximity of a given geographical location.\n\nUnless noted, all Location API methods require the android.Manifest.permission#ACCESS_COARSE_LOCATION or android.Manifest.permission#ACCESS_FINE_LOCATION permissions. If your application only has the coarse permission then it will not have access to the GPS or passive location providers. Other providers will still return location results, but the update rate will be throttled and the exact location will be obfuscated to a coarse level of accuracy.\n\nRequires the PackageManager#FEATURE_LOCATION feature which can be detected using PackageManager.hasSystemFeature(String).\' - Android Developers",
	"code": "LocationManager locationManager = getSystemService(Context.LOACATION_SERVICE);\nlocationManager.requestLocationUpdates(\nLocationManager.GPS_PROVIDER,\n60000,\n5,\nthis);\n"
	},
	{
	"title":"Wallpaper Manager",
	"category":"API",
	"desc":"\'Provides access to the system wallpaper. With WallpaperManager, you can get the current wallpaper, get the desired dimensions for the wallpaper, set the wallpaper, and more.\n\nAn app can check whether wallpapers are supported for the current user, by calling isWallpaperSupported(), and whether setting of wallpapers is allowed, by calling isSetWallpaperAllowed().\'- Android Developers",
	"code":"WallpaperManager manager = WallpaperManager.getInstance(context);\n\nmanager.setBitmap(exampleBitmap)"
	},
	{
	"title":"Shortcut Manager",
	"category":"API",
	"desc":"\'ShortcutManager executes operations on an app's set of shortcuts, which represent specific tasks and actions that users can perform within your app. This page lists components of the ShortcutManager class that you can use to create and manage sets of shortcuts.\n\nTo learn about methods that retrieve information about a single shortcut—including identifiers, type, and status—read the ShortcutInfo reference.\' - Android Developers",
	"code":"ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);\n\nShortcutInfo shortcutSettings = new ShortcutInfo.Builder(this, \"settings\")\n                .setShortLabel(\"options\")\n                .setLongLabel(\"Show Options\")\n                .setIcon(Icon.createWithResource(this,R.drawable.ic_settings))\n                .setIntent(settings)\n                .build();\n\nshortcutManager.setDynamicShortcuts(Arrays.asList(shortcutSettings));"
	}
]

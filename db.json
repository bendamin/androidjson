[
	{
	"title": "TextView",
	"category": "View",
	"desc": "\'A user interface element that displays text to the user. To provide user-editable text, see EditText.\' - Google\n\nTextViews are a common view that is used for showing text to the user. Useful XML attributes include android:text, android:textColor, and android:textSize. Text size should be set is SP values to allow it to scale depending to user needs based on visibility.\n\nUseful Methods include setText, getText,getTextSize, setText and setTextColor\n\nThis is a very useful view and is used in almost all apps that display any form of text.",
	"code": "<LinearLayout\n	xmlns:android=\"http://schemas.android.com/apk/res/android\"\n	android:layout_width=\"match_parent\"\n	android:layout_height=\"match_parent\">\n\n		<TextView\n			android:id=\"@+id/text_view_id\"\n			android:layout_height=\"wrap_content\"\n			android:layout_width=\"wrap_content\"\n			android:text=\"@string/hello\" />\n</LinearLayout>"
	},	
	{
	"title": "EditText",
	"category": "View",
	"desc": "\'A user interface element for entering and modifying text. When you define an edit text widget, you must specify the R.styleable.TextView_inputType attribute. For example, for plain text input set inputType to \"text\".\n\n\Choosing the input type configures the keyboard type that is shown, acceptable characters, and appearance of the edit text. For example, if you want to accept a secret number, like a unique pin or serial number, you can set inputType to \"numericPassword\". An inputType of \"numericPassword\" results in an edit text that accepts numbers only, shows a numeric keyboard when focused, and masks the text that is entered for privacy.\nSee the Text Fields guide for examples of other R.styleable.TextView_inputType settings.\nYou also can receive callbacks as a user changes text by adding a TextWatcher to the edit text. This is useful when you want to add auto-save functionality as changes are made, or validate the format of user input, for example. You add a text watcher using the TextView#addTextChangedListener method.\nThis widget does not support auto-sizing text.\' - Google\n\nEditText views are a common view that is used for allowing the user to enter text. Useful XML attributes include android:text, android:hint, android:textColor, and android:textSize. Text size should be set is SP values to allow it to scale depending to user needs based on visibility.\n\nUseful Methods include setText, getText,getTextSize, setText and setTextColor\n\nThis is a very useful view and is used in almost all apps that allow the user to enter text.",
	"code": "<EditText\n	android:id\"@+id/enterText\"\n	android:layout_height=\"wrap_content\"\n	android:layout_width=\"match_parent\"\n	android:inputType=\"text\"/>"
	},
	{
	"title": "ListView",
	"category": "View",
	"desc": "\'Displays a vertically-scrollable collection of views, where each view is positioned immediatelybelow the previous view in the list. For a more modern, flexible, and performant approach to displaying lists, use RecyclerView.\n\nTo display a list, you can include a list view in your layout XML file.\n\nA list view is an adapter view that does not know the details, such as type and contents, of the views it contains. Instead list view requests views on demand from a ListAdapter as needed, such as to display new views as the user scrolls up or down\n\nIn order to display items in the list, call setAdapter(android.widget.ListAdapter) to associate an adapter with the list. For a simple example, see the discussion of filling an adapter view with text in the Layouts guide.\n\nTo display a more custom view for each item in your dataset, implement a ListAdapter. For example, extend BaseAdapter and create and configure the view for each data item in getView(...)\' - Google",
	"code": "<ListView\n	android:id=\"@+id/list_view\"\n	android:layout_height=\"match_parent\"\n	android:layout_width=\"match_parent\"/> "
	},
	{
	"title": "SharedPreferences",
	"category": "API",
	"desc": "\'Interface for accessing and modifying preference data returned by Context#getSharedPreferences. For any particular set of preferences, there is a single instance of this class that all clients share. Modifications to the preferences must go through an Editor object to ensure the preference values remain in a consistent state and control when they are committed to storage. Objects that are returned from the various get methods must be treated as immutable by the application.\n\nNote: This class provides strong consistency guarantees. It is using expensive operations which might slow down an app. Frequently changing properties or properties where loss can be tolerated should use other mechanisms. For more details read the comments on Editor#commit() and Editor#apply().\' - Google",
	"code": "SharedPreferences.Editor editor = getSharedPreferences(\"prefs\",0).edit();\neditor.putString(\"example\", variableName);\neditor.apply();"
	},
	{
	"title": "Title",
	"category": "Category ex",
	"desc": "Sample desc",
	"code": "beep bop boop"
	},
	{
	"title": "Title",
	"category": "Category ex",
	"desc": "Sample desc",
	"code": "beep bop boop"
	},
	{
	"title": "Title",
	"category": "Category ex",
	"desc": "Sample desc",
	"code": "beep bop boop"
	},
	{
	"title": "Sample Title Here",
	"category": "Category Name Here",
	"desc": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras in lorem id risus iaculis tristique. Praesent non fringilla dolor. Praesent eget dolor ultricies, dictum sem eget, consequat magna. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam ullamcorper quam ac blandit posuere. Praesent ut mattis augue. Suspendisse sodales nulla vel nisi porta aliquet. Aenean ut dolor nulla. Curabitur finibus dapibus velit sed lacinia. Nam vitae sem a justo tempus volutpat. Sed nulla eros, scelerisque nec semper in, dictum tristique turpis. Donec fermentum quis odio vitae fermentum. Aenean non ornare eros. Sed posuere sagittis dui, id interdum ipsum. Suspendisse lobortis, augue in fringilla pretium, lacus ex viverra libero, quis hendrerit orci enim vitae velit.\nDonec aliquam, enim a blandit sodales, nulla sem imperdiet lorem, ac vulputate risus lacus eu metus. Donec id odio tortor. Sed vulputate lacinia augue, nec tristique mauris lacinia nec. Donec lacus est, elementum eu lectus ut, pellentesque tempor sem. Ut felis lacus, posuere id mollis tristique, ornare ac orci. Mauris euismod ligula nec ultrices pulvinar. Proin non placerat risus, eget eleifend tellus. Nullam gravida feugiat sem, in cursus urna pulvinar pulvinar. Aliquam blandit scelerisque dui, varius semper nisi pretium id. Sed consectetur finibus mollis. Nunc sit amet interdum diam. Praesent eu magna vitae eros ullamcorper egestas at vel leo. Quisque ornare arcu et ipsum vestibulum commodo.\nMaecenas id feugiat lectus. Donec sit amet sapien molestie, egestas libero eu, mattis sapien. Proin vestibulum convallis dolor a cursus. Nullam commodo dapibus neque, non hendrerit lectus rhoncus id. Aliquam id sollicitudin arcu. Suspendisse dapibus eget nibh id elementum. Cras aliquet bibendum malesuada. Vestibulum semper placerat interdum. Duis in orci at velit faucibus maximus. Phasellus eu mauris ornare, consequat diam nec, tempus turpis. Donec nec auctor diam.\nNam convallis diam ut eleifend bibendum. Maecenas a convallis nunc. Proin feugiat lacus nec purus fringilla viverra. Fusce non vulputate neque. Maecenas vel ultrices nunc, non pulvinar tortor. Vivamus lacinia ligula id ex dapibus, vel accumsan libero sodales. Nam lacinia sit amet arcu id convallis. Aliquam erat volutpat. Nunc nec nunc suscipit, pulvinar risus eu, aliquet orci. Duis nec mauris nisl. Donec at vehicula ante. Nulla dapibus porttitor sem, sed placerat mauris hendrerit nec. Fusce sagittis nec tellus eu placerat. Vivamus sodales eget nisl vel scelerisque. Quisque aliquet eleifend lorem.\nNunc sed commodo urna, id cursus sem. Fusce nec diam rhoncus, pharetra enim nec, vestibulum lacus. Phasellus quis finibus tortor. Maecenas iaculis est ac purus efficitur, sed sollicitudin metus pulvinar. Proin nec iaculis purus. Pellentesque non elit nisl. Integer id eleifend risus. Duis commodo aliquam iaculis. Maecenas ac odio et nulla malesuada lobortis. Quisque ligula nisl, dictum vitae nulla in, tempor vestibulum felis. Aenean suscipit tortor at sapien egestas congue. Suspendisse mattis, arcu at dictum cursus, dui erat rhoncus lacus, sed luctus mi ligula ut nibh. Donec mattis a tellus in hendrerit. Suspendisse vestibulum urna in neque sodales finibus. Etiam et odio tempus, ultricies justo in, ultrices nibh. Maecenas molestie odio vitae mi bibendum, et auctor libero egestas.",
	"code": "<TextView>\nparameters in here\n</TextView>"
	}
]
